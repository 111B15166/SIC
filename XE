import os

opcode_to_machine_code = {
    "ADD": ("3", "18"), "ADDF": ("3", "58"), "ADDR": ("2", "90"), "AND": ("3", "40"),
    "CLEAR": ("2", "B4"), "COMPF": ("3", "88"), "COMPR": ("2", "A0"), "COMP": ("3", "28"),
    "DIVF": ("3", "64"), "DIVR": ("2", "9C"), "DIV": ("3", "24"), "FIX": ("1", "C4"),
    "FLOAT": ("1", "C0"), "HIO": ("1", "F4"), "J": ("3", "3C"), "JEQ": ("3", "30"),
    "JGT": ("3", "34"), "JLT": ("3", "38"), "JSUB": ("3", "48"), "LDA": ("3", "00"),
    "LDB": ("3", "68"), "LDCH": ("3", "50"), "LDF": ("3", "70"), "LDL": ("3", "08"),
    "LDS": ("3", "6C"), "LDT": ("3", "74"), "LDX": ("3", "04"), "LPS": ("3", "E0"),
    "MUL": ("3", "20"), "MULF": ("3", "60"), "MULR": ("2", "98"), "NORM": ("1", "C8"),
    "OR": ("3", "44"), "RD": ("3", "D8"), "RMO": ("2", "AC"), "RSUB": ("3", "4C"),
    "SHIFTL": ("2", "A4"), "SHIFTR": ("2", "A8"), "SIO": ("1", "F0"), "SSK": ("3", "EC"),
    "STA": ("3", "0C"), "STB": ("3", "78"), "STCH": ("3", "54"), "STF": ("3", "80"),
    "STI": ("3", "D4"), "STL": ("3", "14"), "STSW": ("3", "E8"), "STS": ("3", "7C"),
    "STT": ("3", "84"), "STX": ("3", "10"), "SUBF": ("3", "5C"), "SUBR": ("2", "94"),
    "SUB": ("3", "1C"), "SVC": ("2", "B0"), "TD": ("3", "E0"), "TIO": ("1", "F8"),
    "TIXR": ("2", "B8"), "TIX": ("3", "2C"), "WD": ("3", "DC")
}

def parse_line(line):
    parts = line.strip().split()
    label, opcode, operand = "", "", ""

    if len(parts) == 3:
        label, opcode, operand = parts
    elif len(parts) == 2:
        opcode, operand = parts
    elif len(parts) == 1:
        opcode = parts[0]

    return {"LABEL": label, "OPCODE": opcode, "OPERAND": operand, "LOCCTR": None}

def pass1(input_lines):
    LOCCTR = 0
    symbol_table = {}
    intermediate_file = []
    end_address = None

    if input_lines[0]['OPCODE'] == 'START':
        LOCCTR = int(input_lines[0]['OPERAND'], 16)
        intermediate_file.append({**input_lines[0], "LOCCTR": LOCCTR})
        input_lines = input_lines[1:]

    for line in input_lines:
        current_loc = LOCCTR
        label = line['LABEL']

        if label:
            if label in symbol_table:
                print(f"錯誤：重複的符號 {label}")
            else:
                symbol_table[label] = current_loc

        opcode = line['OPCODE']
        if opcode == "END":
            end_address = line['OPERAND']
            intermediate_file.append({**line, "LOCCTR": current_loc})
            break
        elif opcode == 'BASE':
            intermediate_file.append({**line, "LOCCTR": None})
            continue
        elif opcode.startswith('+'):
            LOCCTR += 4
        elif opcode in opcode_to_machine_code:
            op_format = int(opcode_to_machine_code[opcode][0])
            LOCCTR += op_format
        elif opcode == 'WORD':
            LOCCTR += 3
        elif opcode == 'RESW':
            LOCCTR += 3 * int(line['OPERAND'])
        elif opcode == 'RESB':
            LOCCTR += int(line['OPERAND'])
        elif opcode == 'BYTE':
            if line['OPERAND'].startswith("C'") and line['OPERAND'].endswith("'"):
                LOCCTR += len(line['OPERAND'][2:-1])
            elif line['OPERAND'].startswith("X'") and line['OPERAND'].endswith("'"):
                LOCCTR += (len(line['OPERAND'][2:-1]) + 1) // 2

        intermediate_file.append({**line, "LOCCTR": current_loc})

    return symbol_table, intermediate_file, end_address

def pass2(intermediate_file, symbol_table, end_address):
    formatted_output = []
    formatted_output.append(f"{'位置':<15}{'原始語句':<14}{'目的碼'}")
    base_address = None

    if intermediate_file[0]['OPCODE'] == 'START':
        locctr = int(intermediate_file[0]['OPERAND'], 16)
        formatted_output.append(f"{locctr:04X}      {intermediate_file[0]['LABEL']:<8} {intermediate_file[0]['OPCODE']:<6} {intermediate_file[0]['OPERAND']:<10}")

    for line in intermediate_file[1:]:
        locctr = line['LOCCTR']
        label = line['LABEL']
        opcode = line['OPCODE']
        operand = line['OPERAND']
        locctr_str = f"{locctr:04X}" if locctr is not None else "    "

        if opcode == 'BASE':
            base_address = symbol_table.get(operand, None)
            formatted_line = f"{locctr_str:<10}{label:<8} {opcode:<6} {operand:<10}"
            formatted_output.append(formatted_line)
            continue

        if opcode.startswith('+'):
            obj_code = generate_format4_code(operand, opcode_to_machine_code[opcode[1:]][1], symbol_table)
        elif opcode in opcode_to_machine_code:
            opcode_info = opcode_to_machine_code[opcode]
            op_format = int(opcode_info[0])
            obj_code = opcode_info[1]

            if op_format == 3:
                obj_code = generate_format3_code(operand, obj_code, locctr, symbol_table, base_address)
            elif op_format == 2:
                obj_code = generate_format2_code(operand, obj_code)
        elif opcode == 'BYTE':
            obj_code = generate_byte_code(operand)
        elif opcode == 'WORD':
            obj_code = generate_word_code(operand)
        else:
            obj_code = ""

        formatted_line = f"{locctr_str:<10}{label:<8} {opcode:<6} {operand:<10}{obj_code:<6}"
        formatted_output.append(formatted_line)

    return formatted_output

def generate_format4_code(operand, obj_code, symbol_table):
    n, i, x, b, p, e = 1, 1, 0, 0, 0, 1
    if operand.startswith('#'):
        target = operand[1:]
        disp = int(target) if target.isdigit() else symbol_table.get(target, 0)
    else:
        disp = symbol_table.get(operand, 0)

    opcode_int = int(obj_code, 16) >> 2
    nixbpe = (n << 5) | (i << 4) | (x << 3) | (b << 2) | (p << 1) | e
    return f"{(opcode_int << 2 | (nixbpe >> 4)):02X}{nixbpe & 0x0F:01X}{disp:05X}"
def generate_format3_code(operand, obj_code, locctr, symbol_table, base_address):
    n, i, x, b, p, e = 1, 1, 0, 0, 0, 0
    disp = None

    if ',X' in operand:
        operand = operand.replace(',X', '')
        x = 1

    if operand.startswith('#'):  # Immediate mode
        target = operand[1:]
        if target.isdigit():
            disp = int(target)  # Directly use the immediate value
            n, i = 0, 1  # Immediate mode flags
        else:
            disp = symbol_table.get(target, None)
            if disp is None:
                raise ValueError(f"未找到符號 {target} 的地址")
            n, i = 0, 1
    elif operand.startswith('@'):  # Indirect mode
        target = operand[1:]
        disp = symbol_table.get(target, None)
        n, i = 1, 0
    else:  # Simple addressing mode
        disp = symbol_table.get(operand, None)

    # For immediate mode with a numeric target, skip PC-relative or base-relative addressing
    if disp is not None and not (operand.startswith('#') and operand[1:].isdigit()):
        relative_disp = disp - (locctr + 3)
        if -2048 <= relative_disp <= 2047:
            disp = relative_disp & 0xFFF
            p = 1
        elif base_address is not None and 0 <= disp - base_address <= 4095:
            disp = disp - base_address
            b, p = 1, 0
    elif disp is None:
        disp = 0

    opcode_int = int(obj_code, 16)
    nixbpe = (n << 5) | (i << 4) | (x << 3) | (b << 2) | (p << 1) | e
    return f"{opcode_int | ((nixbpe >> 4) & 0x03):02X}{nixbpe & 0x0F:01X}{disp:03X}"

def generate_format2_code(operand, obj_code):
    r1, r2 = operand.split(',') if ',' in operand else (operand, "0")
    reg1_value = get_register_value(r1)
    reg2_value = get_register_value(r2)
    return f"{obj_code}{reg1_value:01X}{reg2_value:01X}"

def generate_byte_code(operand):
    if operand.startswith("C'") and operand.endswith("'"):
        return ''.join(f"{ord(c):02X}" for c in operand[2:-1])
    elif operand.startswith("X'") and operand.endswith("'"):
        return operand[2:-1]
    else:
        return ""

def generate_word_code(operand):
    if operand.startswith('-'):
        value = int(operand)
        return f"{(0x1000000 + value):06X}"
    else:
        return f"{int(operand):06X}"

def get_register_value(reg):
    registers = {"A": 0, "X": 1, "L": 2, "B": 3, "S": 4, "T": 5, "F": 6, "PC": 8, "SW": 9}
    return registers.get(reg, 0)

def main():
    input_file = r"C:\Users\CJCU-CC\Desktop\123\SICXE.txt"
    output_file = r"C:\Users\CJCU-CC\Desktop\123\outputSIC.txt"

    with open(input_file, "r") as file:
        input_lines = [parse_line(line) for line in file if line.strip() and not line.startswith('.')]

    symbol_table, intermediate_file, end_address = pass1(input_lines)
    formatted_output = pass2(intermediate_file, symbol_table, end_address)

    with open(output_file, "w") as f:
        for line in formatted_output:
            f.write(f"{line}\n")

if __name__ == "__main__":
    main()    
